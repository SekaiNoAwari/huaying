<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>画影</title>
  
  <subtitle>繁花已矣，雪影难觅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-12T01:19:35.903Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>画影</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库相关复习笔记</title>
    <link href="http://yoursite.com/2020/06/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/06/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-12T01:19:35.000Z</published>
    <updated>2020-06-12T01:19:35.903Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库索引相关笔记</title>
    <link href="http://yoursite.com/2020/06/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/06/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-10T03:35:37.000Z</published>
    <updated>2020-06-11T09:29:09.886Z</updated>
    
    <content type="html"><![CDATA[<p>##数据库索引</p><blockquote><h3 id="数据库索引是什么"><a href="#数据库索引是什么" class="headerlink" title="数据库索引是什么"></a>数据库索引是什么</h3></blockquote><p>数据库的索引是存储了数据库表中某一个列的值的数据结构，最常见的是B-Tree。所以说，数据库的本质是一个数据结构。<br>（索引是一种快速查询表中内容的机制，类似于新华字典的目录<br>运用在表中某些字段上，但存储时，独立于表之外）</p><span id="more"></span><blockquote><h3 id="数据库索引的作用是什么"><a href="#数据库索引的作用是什么" class="headerlink" title="数据库索引的作用是什么"></a>数据库索引的作用是什么</h3></blockquote><p>在查找次数很频繁的数据列上使用索引可以有效减少查找的时间，使数据查找更加有效率。</p><blockquote><h3 id="数据库索引的特点是什么"><a href="#数据库索引的特点是什么" class="headerlink" title="数据库索引的特点是什么"></a>数据库索引的特点是什么</h3></blockquote><p>（查找操作花费时间比较短，删除和插入操作花费时间比较多）<br>1.索引一旦建立，数据库管理系统会对其进行自动维护，而且由数据库管理系统决定何时使用索引<br>2.用户不用在查询语句中指定使用哪个索引<br>3.在定义primary key或unique约束后系统自动在相应的列上创建索引<br>4.用户也能按照自己的需求，对指定单个字段或多个字段，添加索引</p><blockquote><h3 id="数据库索引是怎样提升性能的"><a href="#数据库索引是怎样提升性能的" class="headerlink" title="数据库索引是怎样提升性能的"></a>数据库索引是怎样提升性能的</h3></blockquote><p>在没有索引的情况下，如果查找表中数据，那么就需要一条数据一条数据地查找，比对与所查数据是否一致，极端情况下需要查到数据表最后一条，如果数据表中的数据不存在所查的数据条目的时候，甚至不能查到。因此使用索引，因为索引中只记录特定列的数据，并且通常的B-Tree是有序且分层的，查找到对应的数据的列的值会快很多。查找到特定列的值的数据之后，这条索引上会记录有该条数据所对应的表中的地址，直接读取即可获得这一条全部数据。</p><blockquote><h3 id="数据库怎么知道什么时候使用索引"><a href="#数据库怎么知道什么时候使用索引" class="headerlink" title="数据库怎么知道什么时候使用索引"></a>数据库怎么知道什么时候使用索引</h3></blockquote><p>当某一条查询语句（比如select * from Tabel_A where A=a ）运行的时候，数据库会检查所查询的列上是否有索引。假如该列（本例中的A）上确实有索引，数据库会接着检查这个索引做查询是否合理（因为某系情况下，使用索引会比全表扫描效率更低），当使用索引的时间预期更低的时候才会使用索引。</p><blockquote><h3 id="什么时候使用索引比不使用索引效率还低"><a href="#什么时候使用索引比不使用索引效率还低" class="headerlink" title="什么时候使用索引比不使用索引效率还低"></a>什么时候使用索引比不使用索引效率还低</h3></blockquote><p>例如，当有100万条数据，每个数据块8k，只能存10条数据，那么一共需要10万个数据块，而要查询的数据很分散，每个数据块都保存有一行。此时，全表扫描比索引扫描会快，因为此时全表扫描和索引扫描都需要10万个物理读，而索引扫描要先去索引中招到所有的rowid，然后发现还是要加载10万个数据块，结果比全表扫描多了IO。</p><p>另一个例子：一个表有100万条数据，一个数据块能保存1000条数据，那么需要1000个数据块。查询10万条数据，如果用索引扫描，那么需要从索引中找到10万行数据的rowid，然后再去执行10万次TABLE ACCESS BU ROWID，需要处理10万次数据块，虽然会缓存避免物理读，但是全表扫描只需要处理1000个数据块，显然此时全表扫描的效率会高一些。</p><p>以上只是两个比较极端的例子，用以说明并不是任何时候使用索引都会提高查询效率。</p><blockquote><h3 id="使用数据库索引有什么代价（缺点）"><a href="#使用数据库索引有什么代价（缺点）" class="headerlink" title="使用数据库索引有什么代价（缺点）"></a>使用数据库索引有什么代价（缺点）</h3></blockquote><p>1.表越大，索引占用的空间越大。<br>2.性能损失（主要是值更新操作），当你在表中添加、删除或更新行数据的时候，在索引中也会有相同的操作（建立在某列或某几列的索引需要保存该列上最新的数据）</p><p>因此，使用索引的基本原则是，如果表中某列在查询过程中使用非常频繁，那么就在该列上创建索引。</p><blockquote><h3 id="什么时候【要】创建索引"><a href="#什么时候【要】创建索引" class="headerlink" title="什么时候【要】创建索引"></a>什么时候【要】创建索引</h3></blockquote><p>1.表经常进行select操作<br>2.表很大（记录很多），记录内容分布范围很广<br>3.列名经常在where子句或连接条件中出现</p><blockquote><h3 id="什么时候【不要】创建索引"><a href="#什么时候【不要】创建索引" class="headerlink" title="什么时候【不要】创建索引"></a>什么时候【不要】创建索引</h3></blockquote><p>1.表经常进行insert/delete/update操作<br>2.表很小（记录很少）<br>3.列名不经常作为连接条件或出现在where子句中</p><blockquote><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3></blockquote><p>· 唯一索引： 唯一索引不允许两行具有相同的索引值<br>· 主键索引： 为表定义一个主键将自动创建主键索引，主键索引是唯一索引的特殊类型。主键索引要求主键中的每个值是唯一的，并且不能为空<br>· 聚集索引（Clustered）： 表中各行的物理顺序与键值的逻辑（索引）顺序相同，每个表只能有一个<br>· 非聚集索引（Non-clustered）： 非聚集索引指定表的逻辑顺序。数据存储在一个位置，索引存储在另一个位置，索引中包含指向数据存储位置的指针。可以有多个，小于249个</p><blockquote><h3 id="创建索引的语句"><a href="#创建索引的语句" class="headerlink" title="创建索引的语句"></a>创建索引的语句</h3></blockquote><p>单个索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX name_index <span class="keyword">ON</span> TABEL_A (A)</span><br></pre></td></tr></table></figure><p>联合索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX name_index <span class="keyword">ON</span> TABEL_A (A, B)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##数据库索引&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;数据库索引是什么&quot;&gt;&lt;a href=&quot;#数据库索引是什么&quot; class=&quot;headerlink&quot; title=&quot;数据库索引是什么&quot;&gt;&lt;/a&gt;数据库索引是什么&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;数据库的索引是存储了数据库表中某一个列的值的数据结构，最常见的是B-Tree。所以说，数据库的本质是一个数据结构。&lt;br&gt;（索引是一种快速查询表中内容的机制，类似于新华字典的目录&lt;br&gt;运用在表中某些字段上，但存储时，独立于表之外）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>安卓学习</title>
    <link href="http://yoursite.com/2020/04/14/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/04/14/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-04-14T08:18:47.000Z</published>
    <updated>2020-04-15T00:42:27.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="活动（Activity）"><a href="#活动（Activity）" class="headerlink" title="活动（Activity）"></a>活动（Activity）</h2><blockquote><h3 id="活动的基本用法"><a href="#活动的基本用法" class="headerlink" title="活动的基本用法"></a>活动的基本用法</h3></blockquote><ol><li>活动是什么</li></ol><p>活动是最容易吸引用户的地方，他是一种可以包含用户界面的组件，主要用于和用户进行交互。一个应用程序可以包含零个或者多个活动，但不包含任何活动的应用程序很少。</p><span id="more"></span><ol start="2"><li>活动的基本用法</li><li>在AndroidManifest.xml文件中注册</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.activitytest&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.FirstActivity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于在最外层的<manifest>标签中已经通过package属性指定了程序的包名是com.example.activitytest，因此在注册活动时这一部分就可以省略了，直接使用.FirstActivity就足够了。<br>不过仅仅像这样注册活动的程序仍然不能运行，因为还没有为程序配置主活动。配置主活动需要在<activity>标签内部加入<intent-filter>标签，并在这个标签里添加<action android:name="android.intent.action.MAIN"/>和<category android:name="android.intent.category.LAUNCHER"/>这两句声明即可。<br>此外，我们还可以使用Android:label指定活动中标题栏的内容。需要注意的是，个主活动指定的label不仅会成为标题栏中的内容，还会成为启动器(Launcher)中应用程序显示的名称。</p><ol start="4"><li>在活动中使用Toast</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(FirstActivity.<span class="built_in">this</span>,<span class="string">&quot;You Clicked Button 1&quot;</span>,Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure><ol start="5"><li>在活动中使用menu</li></ol><p>首先在res目录下新建一个menu文件夹，接着在这个文件夹下再新建一个名叫main的菜单（右击menu文件夹→New→Menu resouce file）<br>在main.xml中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/add_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;Add&quot;</span>/&gt;</span></span><br><span class="line">        android:id=&quot;@+id/remove_item&quot;</span><br><span class="line">        android:title=&quot;Add&quot;/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着回到FirstActivity中重写onCreateOptionsMenu()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreateOptionsMenu</span><span class="params">(Menu menu)</span>&#123;</span><br><span class="line">    getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过getMenuInflater()方法能够得到MenuInflater对象，再调用它的inflate()方法就可以给当前活动创建菜单了。inflate()方法接收2个参数，第一个参数用于指定我们通过哪一个资源文件来创建菜单，这里传入R.menu.main，第二个参数用于指定我们的菜单项将添加到哪一个Menu对象中，这里直接使用onCreateOptionsMenu()方法中传入的menu参数，然后给这个方法返回true，表示允许创建的菜单显示出来，如果返回false，创建的菜单将无法显示。</p><ol start="6"><li>销毁一个活动</li></ol><p>修改按钮监听器中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickeListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><h3 id="使用Intent在活动间穿梭"><a href="#使用Intent在活动间穿梭" class="headerlink" title="使用Intent在活动间穿梭"></a>使用Intent在活动间穿梭</h3></blockquote><ol><li>使用显式Intent<br>新建SecondActivity，在AndroidManifest.xml中注册活动，修改样式<br>修改FirstActivity中按钮的点击事件，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(FirstActivity.<span class="built_in">this</span>,SecondActivity.class);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用隐式Intent</li></ol><p>打开AndroidManifest.xml，添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.SecondActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.activitytest.ACTION_START&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent_filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<action>标签中我们指明了当前活动可以响应com.example.activitytest.ACTION_START这个action，而<category>标签则包含了一些附加信息，更精确地指明了当前活动能够响应的Intent中还可能带有的category。只有<action>和<category>中的内容能够匹配上Intent中指定的action和category时，这个活动才能响应该Intent。</p><p>修改FirstActivity中按钮的点击事件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.activitytest.ACTION_START&quot;</span>);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>每个Intent只能指定一个action，但却能指定多个category。需要在<intent-filter>中添加新的category的声明。</p><ol start="3"><li><p>更多隐式Intent的用法  </p><p>使用隐式Intent，我们不仅可以启动自己程序内的活动，还可以启动其他程序的活动，这使得Android中多个程序之间的功能共享成为了可能。</p><p>修改FirstActivity中按钮点击事件的代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_VIEW);</span><br><span class="line">        Intent.setData(Uri.parse(<span class="string">&quot;http://www.baidu.com&quot;</span>));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>与此对应，我们还可以在<intent-filter>标签中再配置一个<data>标签，用于更精确地指定当前活动能响应什么类型的数据。<data>标签中主要可以配置以下内容。</p><pre><code>1. android:scheme。用于指定数据的协议部分，如上例中的http部分。2. android:host。用于指定数据的主机名部分，如上例中的www.baidu.com部分。3. android:port。用于指定数据的端口部分，一般紧随在主机名之后。4. android:path。用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容。5. android:mimeType。用于指定可以处理的数据类型，允许使用通配符的方式进行指定。</code></pre><p>只有<data>标签中指定的内容和Intent中携带的Data完全一致时，当前活动才能够相应该Intent。但是可以缺省<br>除了http协议外，我们还可以指定其他很多协议，比如geo表示显示地理位置，tel表示拨打电话。下面的代码展示了如何在我们的程序中调用系统拨号界面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_DIAL);</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">&quot;tel:10086&quot;</span>));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>向下一个活动传递数据<br>在启动活动时传递数据的思路很简单，Intent中提供了一系列putExtra()方法的重载，可以把我们想要传递的数据暂存在Intent中，启动了另一个活动后，只需要把这些数据再从Intent中取出就可以了。<br>在第一个活动中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(FirstActivity.<span class="built_in">this</span>, SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;extra_data&quot;</span>, data);</span><br></pre></td></tr></table></figure>在第二个活动中取出数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> intent.getStringExtra(<span class="string">&quot;extra_data&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><p>首先可以通过getIntent()方法获取到用于启动SecondActivity的Intent，然后调用getStringExtra()方法，传入相应的简直，就可以得到传递的数据了。传入的是字符串，就用getStringExtra()，如果传递的是整型数据，则用getIntExtra()，以此类推。</p><ol start="5"><li>返回数据给上一个活动<br>返回上一个活动只需要按一下Back键就可以了，并没有一个用于启动活动Intent来传递数据。Activity中还有一个startActivityForResult()方法也是用来启动活动的，但是这个方法期望在活动销毁的时候能返回一个结果给上一个活动。<br>startActivityForResult()方法接收2个参数，第一个参数是Intent，第二个参数是请求码，用于在之后的回调中判断数据的来源。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(FirstActivity.<span class="built_in">this</span>, SecondActivity.class);</span><br><span class="line">        startActivityForResult(intent,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>接下来在SecondActivity中给按钮注册点击事件，并在点击事件中添加返回数据的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActvity</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span>&#123;</span><br><span class="line">       suoer.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.second_activity);</span><br><span class="line">       <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> (Button) findViewById(R.id.button_2);</span><br><span class="line">       button,setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">               <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">               intent.putExtra(<span class="string">&quot;data_return&quot;</span>, <span class="string">&quot;Hello FirstActivity&quot;</span>);</span><br><span class="line">               setResult(RESULT_OK,intent);</span><br><span class="line">               finish();</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Intent只是用于传递数据，然后调用setResult()方法。这个方法是专门用于向上一个活动返回数据的。setResult()方法接收2个参数，第一个参数用于向上一个活动返回处理结果，一般只使用RESULT_OK或者RESULT_CANCELED这两个值，第二个参数则把带有数据的Intent传递回去，然后调用finish()方法来销毁当前活动。<br>由于我们是使用startActiityForResult()方法来启动SecondActivity的，在SecondActivity被销毁之后会调用上一个活动的onActivityResult()方法，因此我们需要在FirstActivity中重写这个方法来得到返回的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResut</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(requestCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span>(resultCode == RESULT_OK)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">returnData</span> <span class="operator">=</span> data.getStringExtra(<span class="string">&quot;data_return&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onActivityResult()方法由3个参数，第一个参数requestCode，即我们在启动活动时传入的请求码。第二个参数resultCode，即我们在返回数据时传入的处理结果。第三个参数data，即携带着返回数据的Intent。如果用户不是通过点击按钮，而是按下Back键回到FirstActivity，可以通过在SecondActivity中重写onBackPressed()方法来解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBackPressed</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">    intent.putExtra(<span class="string">&quot;data_return&quot;</span>, <span class="string">&quot;Hello FirstActivity&quot;</span>);</span><br><span class="line">    setResult(RESULT_OK, intent);</span><br><span class="line">    finish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>###活动的生命周期</p></blockquote><ol><li><p>返回栈  </p></li><li><p>活动状态<br>每个活动在其生命周期中最多可能会有4种状态</p><ol><li>运行状态<br>当一个活动位于返回栈的栈顶时，这个活动就处于运行状态。系统最不言以回收的就是处于运行状态的活动，因为这会带来非常差的用户体验</li><li>暂停状态<br>当一个活动不再处于栈顶位置，但仍然可见时，这时活动就进入了暂停状态。</li><li>停止状态<br>当一个活动不再处于栈顶位置并且完全不可见是，就进入了停止状态。</li><li>销毁状态  </li></ol><ol start="3"><li><p>活动的生存期<br>Activity类中定义了7个回调方法，覆盖了活动生命周期的每一个环节：<br>·onCreate()。每个活动中都要重写这个方法，它在活动第一次被创建时调用。在这个方法中完成活动的初始化操作，比如加载布局、绑定事件等<br>· onStart()。这个方法在活动由不可见变为课件的时候调用。<br>· onResume()。这个方法在活动装备好和用户进行交互的时候调用，此时的活动一定位于返回栈的栈顶，并且处于运行状态。<br>· onPause()。这个方法在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方法中将一些小号CPU的资源释放掉，以及保存一些关键数据，但是这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。<br>· onStop()。这个方法在活动完全不可见的时候调用。它和onPause()方法的主要区别在于，如果启动的新活动是一个对话框式的活动，那么onPause()方法会得到执行，而onStop()方法不会执行。<br>· onDestroy()。这个方法在活动被销毁之前调用，之后的活动状态将变为销毁状态。<br>· onRestart()。这个方法在活动由停止状态变为运行状态之前调用，也就是活动呗重新启动了。<br>以上7个方法中除了onRestart()方法，其他都是两两相对的，从而又可以将活动氛围3种生存期。</p><ul><li>完整生存期。活动在onCreate()方法和onDestroy()方法之间所经历的，就是完整生存期。一般情况下，一个活动会在onCreate()方法中完成各种初始化操作，而在onDestroy()方法中完成释放内存的操作。</li><li>可见生存期。活动在onStart()方法和onStop()方法之间所经历的，就是可见生存期。在可见生存期内，活动对于用户总是可见的，即便有可能无法和用户进行交互。我们可以通过这两个方法，合理地管理那些对用户可见的资源。比如在onStart()中对资源进行加载，而在onStop()方法中对资源进行释放，从而保证处于停止状态的活动不会过多占用内存。</li><li>前台生存期。活动在onResume()方法和onPause()方法之间所经历的就是前台生存期。在前台生存期内，活动总是处于运行状态的，此时的活动是可以和用户进行交互的，我们平时看到和接触得最多的也就是这个状态下的活动。  </li></ul></li><li><p>活动被回收了怎么办<br>Activity中提供了一个onSaveInstanceState()回调方法，这个方法可以保证在活动被回收之前一定会被调用，因此我们可以通过这个方法来解决活动被回收临时数据得不到保存的问题。<br>onSaveInstanceState()方法会携带一个Bundle类型的参数，Bundle提供了一些列的方法用于保存数据，比如可以使用putString()方法保存字符串，使用putInt()方法保存整型数据，以此类推。每个保存方法需要传入两个参数，第一个参数是键，用于后面从Bundle中屈指，第二个参数是真正要保存的内容。  </p></li></ol></li><li><p>活动的启动模式<br>启动模式一共4个，分别为standard、singleTop、singleTask和singleInstance，可以在AndroidManifest.xml中通过给<activity>标签指定android:launchMode属性来选择启动模式。<br> · standard<br> 每当启动一个新的活动，它就会在返回栈中入栈，并处于栈顶的位置。<br> · singleTop<br> 在启动活动时如果发现返回栈的栈顶已经是该活动，则认为可以直接使用它，不会再创建新的活动实例。<br> · singleTask<br> 每次启动该活动时，系统会首先在返回栈中检查是否存在该活动的实例，如果发现已经存在则直接使用该实例，并把这个活动智商的所有活动统统出栈，如果没有发现就会创建一个新的活动实例。<br> · singleInstance<br> 指定为singleInstance模式的活动会启用一个新的返回栈来管理这个活动，不管哪个应用程序来访问这个活动，都公用的同一个返回栈，也就解决了共享活动实例的问题。</p></li></ol><blockquote><p>###UI开发  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;活动（Activity）&quot;&gt;&lt;a href=&quot;#活动（Activity）&quot; class=&quot;headerlink&quot; title=&quot;活动（Activity）&quot;&gt;&lt;/a&gt;活动（Activity）&lt;/h2&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;活动的基本用法&quot;&gt;&lt;a href=&quot;#活动的基本用法&quot; class=&quot;headerlink&quot; title=&quot;活动的基本用法&quot;&gt;&lt;/a&gt;活动的基本用法&lt;/h3&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;活动是什么&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;活动是最容易吸引用户的地方，他是一种可以包含用户界面的组件，主要用于和用户进行交互。一个应用程序可以包含零个或者多个活动，但不包含任何活动的应用程序很少。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>望云归</title>
    <link href="http://yoursite.com/2020/04/14/%E6%9C%9B%E4%BA%91%E5%BD%92/"/>
    <id>http://yoursite.com/2020/04/14/%E6%9C%9B%E4%BA%91%E5%BD%92/</id>
    <published>2020-04-14T07:56:47.000Z</published>
    <updated>2020-04-15T00:42:02.164Z</updated>
    
    <content type="html"><![CDATA[<p>##噫吁嚱，危乎高哉，蜀道之难，难于上青天。</p><span id="more"></span>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##噫吁嚱，危乎高哉，蜀道之难，难于上青天。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="望云归" scheme="http://yoursite.com/tags/%E6%9C%9B%E4%BA%91%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/14/hello-world/"/>
    <id>http://yoursite.com/2020/04/14/hello-world/</id>
    <published>2020-04-14T01:54:10.608Z</published>
    <updated>2020-04-14T01:54:10.608Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
